{"componentChunkName":"component---src-templates-article-js","path":"/articles/star-wars","result":{"data":{"markdownRemark":{"html":"<p>Did you know that <em>The Imperial March</em> is 104bpm? This is the kind of useless fact I now know as a result of trying to recreate the classic theme tune in the browser.</p>\n<p>I have recently become interested in how to create music in the browser. While looking around for libraries I could make music with, I came across <a href=\"https://tonejs.github.io/\">tone.js</a>. Using the library you can make your browser play music with code as simply as:</p>\n<pre><code class=\"language-js\">//create a synth and connect it to the master output (your speakers)\nvar synth = new Tone.Synth().toMaster()\n\n//play a middle 'C' for the duration of an 8th note\nsynth.triggerAttackRelease('C4', '8n')\n</code></pre>\n<p>This was awesome to me because I have been brought up able to read music, so being able to write 'C4' in order to get the synth to play a 'C' in the 4th octive was not hard for me to pick up.</p>\n<p>To get started, I installed tone.js:</p>\n<pre><code>npm install --save tone\n</code></pre>\n<p>I then imported our new library and created a function called playSong that would be triggered by the call to action:</p>\n<pre><code class=\"language-jsx\">import React from \"react\";\nimport Tone from \"tone\";\n\nexport default function Start() {\n  const playSong = () => {\n    console.log(\"Playing Imperial March!\")\n  };\n  return (\n    &#x3C;div >\n    &#x3C;button onClick={() => playSong()} >\n       PLAY\n     &#x3C;/button>\n   &#x3C;/div> \n  );\n}\n</code></pre>\n<p>In order to start creating sound, we're going to need to set the bpm and create a synth:</p>\n<pre><code class=\"language-js\">const playSong = () => {\n    Tone.Transport.bpm.value = Music.bpm;\n    var synth = new Tone.Synth().toMaster();\n  };\n</code></pre>\n<p>you see the <em>.toMaster()</em>? Thats connecting the synth to the master output. If you run the code now you still wont hear anything as we havent told the synth what to play. Lets fix that:</p>\n<pre><code class=\"language-js\">const playSong = () => {\n    Tone.Transport.bpm.value = 104;\n    var synth = new Tone.Synth().toMaster();\n    const synthPart = new Tone.Sequence(\n      function(time, note) {\n        synth.triggerAttackRelease(note, \"10hz\", time);\n      },\n      [\"C4\"],\n      \"4n\"\n    ).start();\n    Tone.Transport.start();\n  };\n</code></pre>\n<p>Thats going to play middle C for us on repeat but in the future we are going to pass it an array of notes that make up the imperial march. Check it out in your browser! </p>\n<p>Because the song will be quite a large array, I decided to throw it in a seperate JSON file. I set it up as follows: </p>\n<pre><code class=\"language-json\">{\n  \"notes\": [\n    \"G2\",\n    \"G2\",\n    \"G2\",\n    [\"Eb2\", [\"Eb2\", \"Bb2\"]],\n    \"G2\",\n    [\"Eb2\", [\"Eb2\", \"Bb2\"]]\n    // MANY MORE LINES HERE\n   ],\n  \"bpm\": 104\n}\n</code></pre>\n<p>Notice the inner arrays? They split the note lengths in half. I then imported the file and used it as such: </p>\n<pre><code class=\"language-js\">import Music from \"../music/imperialMarch.json\";\n\nconst playSong = () => {\n    Tone.Transport.bpm.value = Music.bpm;\n    var synth = new Tone.Synth().toMaster();\n    const synthPart = new Tone.Sequence(\n      function(time, note) {\n        synth.triggerAttackRelease(note, \"10hz\", time);\n      },\n      Music.notes,\n      \"4n\"\n    ).start();\n    Tone.Transport.start();\n  };\n</code></pre>\n<p>And hey presto! We have the imperial march in our browser. You can check it out <a href=\"https://starwars.sld.codes/\">here</a></p>\n<p>May the force be with you!</p>\n<p><img src=\"https://ik.imagekit.io/sld/done_NWe8owZ09.gif\" alt=\"done!\"></p>","frontmatter":{"title":"Recreating 'The Imperial March' with JS","desc":"An experiment with Tone.js in Gatsby"}}},"pageContext":{}}}
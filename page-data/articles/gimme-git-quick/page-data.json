{"componentChunkName":"component---src-templates-article-js","path":"/articles/gimme-git-quick","result":{"data":{"markdownRemark":{"html":"<h3>üö®DISCLAIMER: This is by no means a comprehensive guide to using git. It is intended to be used in hackathon type scenarios where you team want to use it but you've never touched it before. If you are looking for something more in depth check out this <a href=\"https://medium.com/@george.seif94/a-full-tutorial-on-how-to-use-github-88466bac7d42\">awesome article</a>.</h3>\n<h1>Super Super Compressed Quick Start</h1>\n<p><em>Look at this section only if you have no time.</em> Otherwise <a href=\"#0\">jump to the next chapter</a> for a more comprehensive guide. This chapter is literally the <em>how</em> without the <em>why</em>.</p>\n<p>0 - Install git</p>\n<p><a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">Click here to get git</a></p>\n<p>1 - Clone the repo (Swap out URL for your team's repo)</p>\n<pre><code>git clone https://github.com/slarsendisney/personal-site.git\n</code></pre>\n<p>Now <code>cd</code> into the project folder.</p>\n<p>2 - Create a branch</p>\n<pre><code># If you are working on different features:\ngit checkout -b feature/name-of-the-feature\n\n# If you prefer to identify by team mate:\ngit checkout -b your-name/thing you are working on\n</code></pre>\n<p>3 - Code the thing ‚ö°Ô∏è</p>\n<p><img src=\"https://ik.imagekit.io/sld/code_8h0lMiPBd.gif\" alt=\"Code\"></p>\n<p>4 - Commmit and push your code</p>\n<p>If you need to ignore any files add a <code>.gitignore</code> file and inside write the names of any files/folders you want to ignore:</p>\n<pre><code>a-folder-to-ignore/\na-file-to-ignore.js\n</code></pre>\n<p>Add your code to the staging area:</p>\n<pre><code>git add -A\n</code></pre>\n<p>Commit it with a suitable message:</p>\n<pre><code># This example uses conventional commit format -> https://www.conventionalcommits.org\n\ngit commit -m \"fix(client): Fixed bug that caused infinite rerenders in index.js\"\n</code></pre>\n<p>Time to push it to the repo</p>\n<pre><code>git push\n</code></pre>\n<p>Your code is now in the cloud ‚òÅ. But its not on master! Time to raise a PR:</p>\n<pre><code>1. Navigate to the repo\n2. Click on Pull requests\n3. Click New pull request\n4. Select master as base branch and then select your branch as the head branch\n5. Click Create pull request.\n6. Get it approved and merged by your team.\n7. All done. ‚úÖ\n</code></pre>\n<p>Merge conflicts?</p>\n<p><a href=\"https://github.com/AgileVentures/MetPlus_PETS/wiki/Resolving-Pull-Request-merge-conflicts\">This will fix them</a>.</p>\n<h1>The Less Compressed Guide</h1>\n<h2 id=\"0\">Getting git</h2>\nBefore anything below works you're going to need to make sure you have git. Head here:\n<p><a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\"><code>Getting Started Installing Git</code></a></p>\n<p>Not sure if you have git? Open a terminal and type:</p>\n<pre><code>git --version \n</code></pre>\n<p>If you get a version number back, then congrats you already have git üéâ! If you don't, you'll need to install it. </p>\n<h2 id=\"1\">What is this git thing anyway?</h2>\n<p>Git is distributed version control that allows you to track progress over time. Everyone working on the project has their own local copy of it as opposed to working on a centralised copy.</p>\n<h2>Then what the hell is GitHub?</h2>\n<p>Github is online storage and access for git. Through the site you can set up repositories where you can store your code. There are also many alternatives to Github such as Bitbucket. As a student, you get private repositories on both of these services for free so make the most of it!</p>\n<h2>How do I make a repository?</h2>\n<ol>\n<li>Log In/Sign Up to Github</li>\n<li>Click on your profile</li>\n<li>Click on <em>Repositories</em></li>\n<li>Hit <em>New</em> </li>\n</ol>\n<h2>How do I get code from git?</h2>\n<p>In order to pull code down from a git repository you need to clone the repository using the repository's URL. This creates a local copy for you to work with.  So for example, if you wanted to clone a copy of this website you could use:</p>\n<pre><code>git clone https://github.com/slarsendisney/personal-site.git \n</code></pre>\n<p>Just switch out the URL above with wherever your code is stored and you'll be good to go üëç. Now branch of the code right away!</p>\n<h2>How do I use branches?</h2>\n<p>Branching allows you to isolate your code when working on new features/bug fixes. Changes to the master branch do not affect your branch and as a result you are less likely to run into issues. Creating a new branch does not change the repository; it simply points out the commit.</p>\n<p>You can create a branch using the following format:</p>\n<pre><code># If you are working on different features:\ngit checkout -b feature/name-of-the-feature\n\n# If you prefer to identify by team mate:\ngit checkout -b your-name/thing you are working on\n</code></pre>\n<p>At this point you are ready to code away. Enjoy and keep reading when you are ready to save your codeüòÄ!</p>\n<h2>Committing code</h2>\n<p>Committing code saves your code changes to your local repository. You have to tell git which files you want it to keep track of though. The easiest way to do this is to create a git ignore file and then add the rest.\nCreate a .gitignore file with all the files you want git to ignore:</p>\n<pre><code>a-folder-to-ignore/\na-file-to-ignore.js\n</code></pre>\n<p>We can now add all our other files to git with the following command:</p>\n<pre><code>git add -A\n</code></pre>\n<p>the <code>-A</code> flag tells git to add all files. If you ever add new files to the project you'll need to run this again.</p>\n<h3>At this point we are ready to commit üéâ.</h3>\n<p>Commit it with a suitable message - thats important because it helps you identify what you did in any given commit if you ever look back over them. This example uses the <a href=\"https://www.conventionalcommits.org\">conventional commit format</a>. Its a great format that makes it super easy to tell whats going on:</p>\n<pre><code>feature(scope): description\n</code></pre>\n<p>First you specify the type of the commit, then in brackets you put the scope of the project it affects, and then you add a description. A real example can be seen below:</p>\n<pre><code>git commit -m \"fix(client): Fixed bug that caused infinite rerenders in index.js\"\n</code></pre>\n<h2>How do I get my code back to GitHub?</h2>\nAt this point, everything we've done has been local - lets send our code to the cloud! We need to push it up there - this sends changes on your branch up to the remote branch.\n<pre><code>git push --set-upstream origin your-branch-name\n</code></pre>\n<p>By adding in the <code>--set-upstream</code> it allows to stop specify which branch that you want to pull from every single time that you do git pull.</p>\n<h2>Get your code on master</h2>\nIts time to raise a pull request(or PR!)\n<pre><code>1. Navigate to the repo\n2. Click on Pull requests\n3. Click New pull request\n4. Select master as base branch and then select your branch as the head branch\n5. Click Create pull request.\n6. Get it approved and merged by your team.\n7. All done. ‚úÖ\n</code></pre>\n<h2>Merge conflicts</h2>\nHow to solve them coming soon üò¢\n<h2>Other cool git resources</h2>\n<p><a href=\"https://ohshitgit.com/\">Oh Shit, Git!?!</a></p>\n<p>Some bad situations I've gotten myself into, and how I eventually got myself out of them in plain english.\n<em>By Katie Sylor-Miller</em></p>","frontmatter":{"title":"Gimme Git Quick üèÉ‚Äç","desc":"For the people who needed to know git yesterday. "}}},"pageContext":{}}}